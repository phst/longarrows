% \iffalse meta-comment
% Copyright (C) 2008, 2010, 2011, 2012 by Philipp Stephani <p.stephani2@gmail.com>
%
% This file may be distributed and/or modified under the conditions of the
% LaTeX Project Public License, either version 1.3c of this license or (at your
% option) any later version. The latest version of this license is in
%
%     http://www.latex-project.org/lppl.txt
%
% and version 1.3c or later is part of all distributions of LaTeX version
% 2005/12/01 or later.
% \fi
%
% \iffalse
%<*driver>
\documentclass[a4paper, 10pt, pdftex]{phst-doc}

\usepackage{siunitx}
\usepackage{mflogo}
\usepackage[overwrite=false]{longarrows}

\newcommand*\packagename{\textsf{longarrows}\xspace}

\EnableCrossrefs         
\CodelineIndex
\RecordChanges

\setlength\overfullrule{5pt}

\NewDocumentCommand\arrow{m}{{\large$#1$}}
\DeclareSIUnit{\point}{pt}
\DeclareSIUnit{\mathunit}{mu}

\begin{document}
    \DocInput{longarrows.dtx}
    \PrintChanges
    \PrintIndex
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v0.1}{2008/05/04}{Initial version}
% \changes{v0.2}{2010/09/26}{Various updates}
% \changes{v0.3}{2012/08/28}{Switched to \pkg{l3docstrip}}
%
% \GetFileInfo{longarrows.sty}
%
%
% \title{The \packagename package\thanks{This document corresponds to
% \packagename \fileversion, dated \filedate.}}
%
% \author{Philipp Stephani \\ \texttt{p.stephani2@gmail.com}}
%
% \maketitle
%
% \tableofcontents
% \listoftables
% \listoffigures
%
%
% \section{Introduction}
%
% In standard \LaTeX\ the long double arrows $\Longleftarrow$
% (\cmd{\Longleftarrow}) and $\Longrightarrow$ (\cmd{\Longrightarrow}) don't
% look very good if the document font size is larger than \SI{10}{\point}.  For
% an example, look at the left part of \autoref{Test}.  This is the (magnified)
% result of \cmd{\Longrightarrow} in a standard document (using class
% \cls{article}).  You see that the long horizontals bars are broken somewhere
% in the middle and that they are narrower in the left part of the symbol.
% This results from the fact that the long arrows are not characters on their
% own, but rather composed of two symbols.  In the case of $\Longleftarrow$ and
% $\Longrightarrow$ these characters are the equals sign ($=$) and the short
% double arrows ($\Leftarrow$ and $\Rightarrow$).  The equals sign comes from
% the roman text font family (\eg \fnt{cmr} or \fnt{lmr}), while the short
% arrows are part of the math symbols font family (\eg \fnt{cmsy} or
% \fnt{lmsy}).  For the Computer Modern and Latin Modern fonts, the roman fonts
% come in more design sizes than the symbols font families; in particular, the
% roman fonts are available in \SI{10}{\point}, \SI{11}{\point} and
% \SI{12}{\point} and several other sizes, while the symbols font families are
% only available in \SI{10}{\point} and some smaller sizes.  As the equals sign
% and the double arrows are designed to match at the corresponding font sizes,
% this wouldn't matter if the larger fonts were simply scaled variants of the
% smaller ones.  But this is not the case: the equals sign from a
% \SI{10}{\point} roman font, if scaled by \SI{120}{\percent}, does not match
% the equals sign from the coresponding \SI{12}{\point} font.  This is the
% origin of said problem: The short arrows get scaled to the desired size, but
% the equals sign is taken from an unscaled font.  It's not too difficult to
% imagine that, under these circumstances, the two symbols cannot match.
%
% \packagename uses \LaTeX's font selection mechanism to scale the roman font
% like the symbols font so that the symbols match in every font size.  The
% package detects the presence of \pkg{lmodern} and loads the corrent Latin
% Modern fonts if this package is loaded; otherwise, the Computer Modern fonts
% are used.  There is no support for other fonts at this so far.  The right
% symbol in \autoref{Test} shows the effect of the new font: The equals sign an
% the short arrow match perfectly.
%
% \begin{docfigure}{Test}{Original result (left) and result with \packagename (right)}
%   \vspace{12pt}
%   \scalebox{7}{\arrow{\Longrightarrow \; \nLongrightarrow}}
% \end{docfigure}
%
% This problem doesn't occur for the single long arrows ($\longrightarrow$
% etc.)\ because the minus sign used to extend these arrows is taken from the
% math symbols font family.
%
% All of the long arrows (single and double) are a bit too long, compared to
% other mathematical symbols.  If requested by a special package option,
% \packagename reduces the width of these arrows.
%
%
% \section{Interface}
%
% \subsection{Package loading and options}
%
% Like every package, \packagename can be loaded via the \cmd{\usepackage}
% command.  The general syntax is |\usepackage|\oarg{options}|{longarrows}|,
% where \meta{options} is a comma-separated list of key-value pairs, following
% the rules of the \pkg{xkeyval} package, \ie each key-value pair is of the
% form \meta{key}|=|\meta{value}.
%
% One boolean option |overwrite| is supported.  Its allowed values are |true|
% to enable the corresponding option and |false| to disable it.  If only the
% option name is given, the value |true| is assumed.
%
% \begin{itemize}
% \item For each long arrow command, \packagename creates a new command with
%   the same name as the original command, following a prefix |n|.  For
%   example, the command \cmd{\nLongrightarrow} is defined to be a corrected
%   version of \cmd{\Longrightarrow}.  The option \opt{overwrite} controls
%   whether the predefined commands are to be overwritten by the newly created
%   commands.  This is usually a good idea as you probably want to use the
%   corrected versions without changing your document.  So this option defaults
%   to |true|. The prefixed names are always available, regardless of the value
%   of this option.  If the \opt{overwrite} option is set to |true|, the
%   original commands cannot be accessed any more; in addition, the new
%   definitions automatically apply to derived commands like \cmd{\implies},
%   \cmd{\impliedby} and \cmd{\iff}.
% \item The option \opt{overlap} controls whether the length of the long arrow
%   should be reduced a bit.  The default value is |0mu|, which enables the
%   original behaviour.  The amount of reducing can be fine-tuned by giving a
%   math length to this option.
% \end{itemize}
%
% \noindent
% \packagename attempts to ckeck whether the Latin Modern or the Computer
% Modern fonts are to be used.  This check yields only correct results if the
% \pkg{lmodern} package is loaded before the \packagename package.  Other fonts
% are not supported since they usually contain dedicated glyphs for the long
% arrows.
%
% The \packagename package supports both the definitions from the \pkg{amsmath}
% package as well as those from the \LaTeXe\ kernel; other packages that change
% the arrow commands are not supported.  If you want to use \pkg{amsmath}, load
% it before \packagename.
%
%
% \subsection{Special parameters}
%
% \packagename declares one mathematical skip which is inserted as a kern
% object between the equals sign (or minus, for single arrows) and the short
% arrow to join them visually.  The standard definitions from \LaTeX\ use here
% a hard-wired skip of \SI{-3}{\mathunit}.  Using \packagename, this skip can
% be changed via \cmd{\LongArrowsSetup}.  The package sets this register to
% \SI{-3}{\mathunit}, but other assignments like
% |\LongArrowsSetup{overlap=2mu}| are possible.  The value given has the same
% meaning as the value of the \opt{overlap} option described above.
%
%
% \subsection{Commands}
%
% \DescribeMacros{^^A
%   \nlongleftarrow\nLongleftarrow
%   \nlongrightarrow\nLongrightarrow
%   \nlongleftrightarrow\nLongleftrightarrow
% }
% The package creates the math mode commands \cs{nlong\-left\-arrow},
% \cs{nLong\-left\-arrow}, \cs{nlong\-right\-arrow}, \cs{nLong\-right\-arrow},
% \cs{nlong\-left\-right\-arrow} and \cs{nLong\-left\-right\-arrow} as
% corrected (and possibly reduced) versions of \cs{long\-left\-arrow},
% \cs{Long\-left\-arrow}, \cs{long\-right\-arrow}, \cs{Long\-right\-arrow},
% \cs{long\-left\-right\-arrow} and \cs{Long\-left\-right\-arrow},
% respectively.  If the |overwrite| option is enabled, the original commands
% are overwritten with these new commands.  \autoref{Commands} summarizes all
% of the newly-created and predefined commands.  As this document is set in a
% \SI{10}{\point} font, we have to manually select a \SI{12}{\point} font (with
% the \cmd{\large} command) to make the results visible.  The same has been
% done to produce the arrows in \autoref{Test}.
%
%
% \begin{doctable}{Commands}{List of all commands affected by the package}{@{}cccc@{}}
%   \tblhead{Old command}     & \tblhead{New command}      & \tblhead{Old symbol}        & \tblhead{New symbol}         \\
%   \midrule
%   \cmd{\longleftarrow}      & \cmd{\nlongleftarrow}      & \arrow{\longleftarrow}      & \arrow{\nlongleftarrow}      \\
%   \cmd{\Longleftarrow}      & \cmd{\nLongleftarrow}      & \arrow{\Longleftarrow}      & \arrow{\nLongleftarrow}      \\
%   \cmd{\longrightarrow}     & \cmd{\nlongrightarrow}     & \arrow{\longrightarrow}     & \arrow{\nlongrightarrow}     \\
%   \cmd{\Longrightarrow}     & \cmd{\nLongrightarrow}     & \arrow{\Longrightarrow}     & \arrow{\nLongrightarrow}     \\
%   \cmd{\longleftrightarrow} & \cmd{\nlongleftrightarrow} & \arrow{\longleftrightarrow} & \arrow{\nlongleftrightarrow} \\
%   \cmd{\Longleftrightarrow} & \cmd{\nLongleftrightarrow} & \arrow{\Longleftrightarrow} & \arrow{\nLongleftrightarrow}
% \end{doctable}
%
%
% \section{Possible issues}
%
% The \packagename packages generates a new symbol font\footnote{Also called
% ``math group'' or ``math family''.} (not to confuse with the math symbols
% font family) for the scaled equals sign.  But be aware that at most 16 math
% symbol fonts can be created in one document.  In complex documents with many
% different math styles, \LaTeX\ could run out of symbol fonts.  For example,
% \pkg{amsfonts} requires two symbol fonts, \pkg{bm} up to four.
%
%
% \StopEventually{}
%
%
% \section{Background}
%
% The age of \TeX\ shows up here.  When Knuth created \TeX, space was a much
% more delimiting factor than today.  Thus, several math symbols like
% $\Longrightarrow$ or $\mapsto$ are in fact composed of several smaller
% pieces.  If every one of those were a distinct character in some font, the
% design would me much cleaner.  In fact, one of my earlier attempts consisted
% of creating an additional font by modifying the \MF\ sources, but I have
% abandoned this for several reasons:
%
% \begin{itemize}
% \item it is much more low-level than the package approach, and thus more
%   complicated and error-prone;
% \item it involves generating Type~1 fonts from the modified \MF\ sources via
%   \tool{mftrace}, which can lead to typographical errors;
% \item additional fonts are much harder to distribute than simple packages.
% \end{itemize}
%
% \noindent
% Hopefully, \TeX\ fonts including long arrows become available one day, which
% would render this package unnecessary.
%
%
% \section{Implementation}
%
% \subsection{Package file}
%
% \subsubsection{Initialization}
%
% First we load required packages.
%    \begin{macrocode}
%<*package>
%<@@=longarrows>
\NeedsTeXFormat{LaTeX2e}[2009/09/24]
\RequirePackage{etex}[1998/03/26]
\RequirePackage{expl3}[2010/07/13]
\ProvidesExplPackage{longarrows}{2012/08/28}{0.3}%
  {Better-looking long arrows}
\RequirePackage{xparse}[2010/05/23]
\RequirePackage{l3keys2e}[2010/10/13]
%    \end{macrocode}
%
% \subsubsection{Option processing}
%
% \begin{macro}{\l_@@_overwrite_bool}
% \begin{macro}{\l_@@_overlap_muskip}
%   Two variables to store package/setup options.
%    \begin{macrocode}
\bool_new:N \l_@@_overwrite_bool
\muskip_new:N \l_@@_overlap_muskip
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{option}{overwrite}
% \begin{option}{overlap}
%   The two options \opt{overwrite} and \opt{overlap} are declared.
%    \begin{macrocode}
\keys_define:nn { longarrows } {
  overwrite .bool_set:N = \l_@@_overwrite_bool,
  overlap   .code:n
    = \muskip_set:Nn \l_@@_overlap_muskip { -3mu - #1 }
}
%    \end{macrocode}
% \end{option}
% \end{option}
%
% \begin{macro}{\LongArrowsSetup}
%   This user-level command can be used to change the options defined above.
%    \begin{macrocode}
\NewDocumentCommand \LongArrowsSetup { m } {
  \keys_set:nn { longarrows } { #1 }
}
%    \end{macrocode}
% \end{macro}
% We set the default values for the options and parse them.
%    \begin{macrocode}
\LongArrowsSetup { overwrite = true, overlap = 0mu }
\ProcessKeysPackageOptions { longarrows }
%    \end{macrocode}
%
% \subsubsection{Detecting the font in use}
%
% We distinguish between Latin Modern and Computer Modern.  The actual font
% declaration is done by the font definition files that get loaded
% automatically when required.
%
% \begin{macro}{\l_@@_font_tl}
%   This token list contains the NFSS\,2 family name of the font to be used
%   (\fnt{cmrlongarrows} or \fnt{lmrlongarrows})
%    \begin{macrocode}
\tl_new:N \l_@@_font_tl
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\l_@@_temp_tl}
%   A temporary token list containing the tokens that make up the font
%   definition in the math version selector.
%    \begin{macrocode}
\tl_new:N \l_@@_temp_tl
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\tl_if_in:NoT}
%   The macro |\tl_if_in:NoT|\meta{token list variable}\meta{item list
%   macro}\marg{true code} executes \meta{true code} if the expansion of
%   \meta{item list macro} is contained in the \meta{token list variable}.
%    \begin{macrocode}
\cs_generate_variant:Nn \tl_if_in:NnT { No }
%    \end{macrocode}
% \end{macro}
% \LaTeX\ defines the math version selector |\mv@normal| as a hook containing
% code such as |\getanddefine@fonts\symoperators\OT1/cmr/m/n|, which we exploit
% to check for the font in use for math operators.  Latin Modern in tested
% first, then Computer Modern.
%    \begin{macrocode}
\clist_map_inline:nn { lmr, cmr } {
  \tl_set:Nx \l_@@_temp_tl {
    \exp_not:n { \getanddefine@fonts \symoperators }
    \exp_not:c { OT1/ #1 /m/n }
  }
  \tl_if_in:NoT \mv@normal \l_@@_temp_tl {
    \tl_set:Nn \l_@@_font_tl { #1 longarrows }
    \clist_map_break:
  }
}
%    \end{macrocode}
% \begin{l3message}{unknown-font}
%   This message is issued if no known font was detected.
%    \begin{macrocode}
\msg_new:nnn { longarrows } { unknown-font } {
  Unknown~ font~ detected;~ aborting
}
%    \end{macrocode}
% \end{l3message}
% If |\l_@@_font_tl| is still empty, we abort.
%    \begin{macrocode}
\tl_if_empty:NT \l_@@_font_tl {
  \msg_warning:nn { longarrows } { unknown-font }
  \endinput
}
%    \end{macrocode}
%
% \subsubsection{Checking}
%
% The code in this subsection belongs in a separate checking package.
%
% \begin{l3message}{unknown-def}
%   This message is issued when an unknown definition of a macro is detected.
%    \begin{macrocode}
\msg_new:nnn { longarrows } { unknown-def } {
  Unknown~ definition~ #2~ for~ command~ #1~ detected;~
  expected:~ #3;~ aborting
}
%    \end{macrocode}
% \end{l3message}
%
% \begin{macro}{\tl_if_eq:onF}
%   We need a variant of |\tl_if_eq:nn| that expands its first argument once.
%   This variant was once present in \pkg{expl3}, but has disappeared since
%   then.
%    \begin{macrocode}
\cs_generate_variant:Nn \tl_if_eq:nnF { o }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_check_cmd:NNn}
%   The macro |\@@_check_cmd:NNn|\meta{actual macro}\meta{visible
%   macro}\marg{replacement text} checks whether the \meta{actual macro} has
%   the intended \meta{replacement text}.  Otherwise, a warning message
%   containing the name of the \meta{visible macro} is printed and the package
%   loading is aborted.
%    \begin{macrocode}
\cs_new_protected_nopar:Nn \@@_check_cmd:NNn {
  \tl_if_eq:onF #1 { #3 } {
    \msg_warning:nnxxx { longarrows } { unknown-def }
      { \token_to_str:N #2 } { \tl_to_str:N #1 } { \tl_to_str:n { #3 } }
    \endinput
  }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_check_cmd:NNx}
% \begin{macro}{\@@_check_cmd:cNn}
%   We generate a few variants for argument expansion.
%    \begin{macrocode}
\cs_generate_variant:Nn \@@_check_cmd:NNn { NNx, cNn }
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@@_check_fragile_cmd:Nn}
%   The macro |\@@_check_fragile_cmd:Nn|\meta{macro}\marg{replacement text}
%   checks whether the fragile \meta{macro} (defined by |\newcommand| or
%   |\def|) has the intended \meta{replacement text}.  Otherwise, a warning
%   message containing the name of the \meta{macro} is printed and the package
%   loading is aborted.
%    \begin{macrocode}
\cs_new_protected_nopar:Nn \@@_check_fragile_cmd:Nn {
  \@@_check_cmd:NNn #1 #1 { #2 }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_check_robust_cmd:Nn}
%   The macro |\@@_check_robust_cmd:Nn|\meta{macro}\marg{replacement text}
%   checks whether the fragile \meta{macro} (defined by
%   |\DeclareRobustCommand|) has the intended \meta{replacement text}.
%   Otherwise, a warning message containing the name of the \meta{macro} is
%   printed and the package loading is aborted.
%    \begin{macrocode}
\cs_new_protected_nopar:Nn \@@_check_robust_cmd:Nn {
  \@@_check_cmd:NNx #1 #1 {
    \exp_not:N \protect \exp_not:c { \cs_to_str:N #1 ~ }
  }
  \@@_check_cmd:cNn { \cs_to_str:N #1 ~ } #1 { #2 }
}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\@@_check_robust_cmd:Nn \joinrel { \mathrel { \mkern -3mu } }
\@ifpackageloaded { amsmath } {
  \@@_check_fragile_cmd:Nn \Relbar
    { \mathrel \std@equal }
  \@@_check_fragile_cmd:Nn \longleftarrow
    { \DOTSB \leftarrow \protect \joinrel \protect \relbar }
  \@@_check_fragile_cmd:Nn \Longleftarrow
    { \DOTSB \Leftarrow \protect \joinrel \protect \Relbar }
  \@@_check_fragile_cmd:Nn \longrightarrow
    { \DOTSB \protect \relbar \protect \joinrel \rightarrow }
  \@@_check_fragile_cmd:Nn \Longrightarrow
    { \DOTSB \protect \Relbar \protect \joinrel \Rightarrow }
  \@@_check_fragile_cmd:Nn \longleftrightarrow
    { \DOTSB \leftarrow \joinrel \rightarrow }
  \@@_check_fragile_cmd:Nn \Longleftrightarrow
    { \DOTSB \Leftarrow \joinrel \Rightarrow }
} {
  \@@_check_robust_cmd:Nn \Relbar
    { \mathrel { = } }
  \@@_check_robust_cmd:Nn \longleftarrow
    { \leftarrow \joinrel \relbar }
  \@@_check_robust_cmd:Nn \Longleftarrow
    { \Leftarrow \joinrel \Relbar } 
  \@@_check_robust_cmd:Nn \longrightarrow
    { \relbar\joinrel\rightarrow }
  \@@_check_robust_cmd:Nn \Longrightarrow
    { \Relbar \joinrel \Rightarrow }
  \@@_check_robust_cmd:Nn \longleftrightarrow
    { \leftarrow \joinrel \rightarrow }
  \@@_check_robust_cmd:Nn \Longleftrightarrow
    { \Leftarrow \joinrel \Rightarrow }
%    \end{macrocode}
% \begin{macro}{\DOTSB}
%   We take the case that \pkg{amsmath} is not loaded into account.  All macros
%   except \cmd{\DOTSB} exist in standard \LaTeX, so we assign \cmd{\DOTSB}
%   only if it is not already assigned.  \cmd{\DOTSB} has no real meaning; it
%   is just used as a marker in \pkg{amsmath}.
%    \begin{macrocode}
  \cs_new_eq:NN \DOTSB \scan_stop:
}
%    \end{macrocode}
% \end{macro}
%
% Now we use \cmd{\DeclareSymbolFont} to either declare or overwrite the symbol
% font.  We also set parameters for the bold version.
%    \begin{macrocode}
\DeclareSymbolFont { longarrows }          { OT1 }
  { \l_@@_font_tl } { m  } { n }
\SetSymbolFont     { longarrows } { bold } { OT1 }
  { \l_@@_font_tl } { bx } { n }
%    \end{macrocode}
%
% \begin{macro}{\longarrowjoinrel}
% This is like \LaTeXe's \cmd{\joinrel}.
%    \begin{macrocode}
\NewDocumentCommand \longarrowjoinrel { } {
  \mathrel { \mkern \l_@@_overlap_muskip }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\longarrowRelbar}
%   This symbol is used as arrow extender.  The definition here is actually
%   simpler than the one in \pkg{amsmath}, but should suffice for our purposes.
%    \begin{macrocode}
\chk_if_free_cs:N \longarrowRelbar
\DeclareMathSymbol
  { \longarrowRelbar } { \mathrel } { longarrows } { `\= }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\nlongleftarrow}
%   These definitions are modeled after \pkg{amsmath}, too.
%    \begin{macrocode}
\NewDocumentCommand \nlongleftarrow { } {
  \DOTSB \leftarrow \longarrowjoinrel \relbar
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\nLongleftarrow}
%    \begin{macrocode}
\NewDocumentCommand \nLongleftarrow { } {
  \DOTSB \Leftarrow \longarrowjoinrel \longarrowRelbar
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\nlongrightarrow}
%    \begin{macrocode}
\NewDocumentCommand \nlongrightarrow { } {
  \DOTSB \relbar \longarrowjoinrel \rightarrow
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\nLongrightarrow}
%    \begin{macrocode}
\NewDocumentCommand \nLongrightarrow { } {
  \DOTSB \longarrowRelbar \longarrowjoinrel \Rightarrow
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\nlongleftrightarrow}
%    \begin{macrocode}
\NewDocumentCommand \nlongleftrightarrow { } {
  \DOTSB \leftarrow \longarrowjoinrel \rightarrow
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\nLongleftrightarrow}
%    \begin{macrocode}
\NewDocumentCommand \nLongleftrightarrow { } {
  \DOTSB \Leftarrow \longarrowjoinrel \Rightarrow
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\longleftarrow}
% If overwriting is requested, do it.
%    \begin{macrocode}
\bool_if:NT \l_@@_overwrite_bool {
  \cs_set_eq:NN \longleftarrow      \nlongleftarrow
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\Longleftarrow}
%    \begin{macrocode}
  \cs_set_eq:NN \Longleftarrow      \nLongleftarrow
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\longrightarrow}
%    \begin{macrocode}
  \cs_set_eq:NN \longrightarrow     \nlongrightarrow
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\Longrightarrow}
%    \begin{macrocode}
  \cs_set_eq:NN \Longrightarrow     \nLongrightarrow
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\longleftrightarrow}
%    \begin{macrocode}
  \cs_set_eq:NN \longleftrightarrow \nlongleftrightarrow
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\Longleftrightarrow}
%    \begin{macrocode}
  \cs_set_eq:NN \Longleftrightarrow \nLongleftrightarrow
}
%</package>
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Font definition files}
%
% This is the font definition for the scaled version of \fnt{cmr}.  We use the
% same sizes and creation functions as \fnt{cmsy}.  Note that this does not
% take into account the changes made by \pkg{fix-cm}.
%    \begin{macrocode}
%<*cmfont>
\ProvidesFile{ot1cmrlongarrows.fd}%
  [2010/09/26 v0.2 Computer Modern Roman scaled]
\DeclareFontFamily{OT1}{cmrlongarrows}{}
\DeclareFontShape{OT1}{cmrlongarrows}{m}{n}{%
  <5><6><7><8><9>gen*cmr%
  <10><10.95><12><14.4><17.28><20.74><24.88>cmr10%
}{}
\DeclareFontShape{OT1}{cmrlongarrows}{bx}{n}{%
  <5><6><7><8><9>gen*cmbx%
  <10><10.95><12><14.4><17.28><20.74><24.88>cmbx10%
}{}
%</cmfont>
%    \end{macrocode}
%
% This is the font definition for the scaled version of \fnt{lmr}.  We use the
% same sizes and creation functions as \fnt{lmsy}.
%    \begin{macrocode}
%<*lmfont>
\ProvidesFile{ot1lmrlongarrows.fd}%
  [2010/09/26 v0.2 Latin Modern Roman scaled]
\DeclareFontFamily{OT1}{lmrlongarrows}{}
\DeclareFontShape{OT1}{lmrlongarrows}{m}{n}{%
  <-5.5>rm-lmr5%
  <5.5-6.5>rm-lmr6%
  <6.5-7.5>rm-lmr7%
  <7.5-8.5>rm-lmr8%
  <8.5-9.5>rm-lmr9%
  <9.5->rm-lmr10%
}{}
\DeclareFontShape{OT1}{lmrlongarrows}{bx}{n}{%
  <-6>rm-lmbx5%
  <6-8>rm-lmbx7%
  <8->rm-lmbx10%
}{}
%</lmfont>
%    \end{macrocode}
%
% \Finale
\endinput
